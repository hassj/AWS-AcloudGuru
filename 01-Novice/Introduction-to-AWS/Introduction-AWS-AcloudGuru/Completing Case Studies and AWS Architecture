Hello, Cloud Gurus and welcome to Case Studies and AWS Architecture.
In this lesson,
I want to go through a few different case studies to show how the services
you've learned throughout this course, can be used to actually build something.
This is so we can pull together all the things we've learned about and see how
it all fits together. Let's get started. First,
I want to start with the simplest website.
It's a single availability zone with a single VPC and an EC2
instance.
And there's one more thing I'm going to point out and that's how the user will
access your website. In this case, it'll be straight to EC2.
It seems pretty simple. Actually, this first one was a trick question.
The simplest website is simply Amazon S3.
S3 can be configured to serve websites for you without you having to install a
web server on an EC2 instance,
and the user just connects straight to your S3 bucket.
It's a really awesome feature, but it can be limited in what it can do.
All right, let's move on. Here I'm going to host a basic blog website.
For this, we have our availability zone, our VPC,
our EC2 instance,
and this connects to an Amazon RDS database to host our content.
It's fairly simple. And our user again,
will connect straight to the EC2 instance. Next,
we want a load balanced blog.
This means that we will still have just 1 availability zone, a VPC,
but we will also have an elastic load balancer,
which will redirect traffic to 1 of 2 EC2 servers who in this
case, both access the same Amazon RDS database.
In this case, our user connects to the load balancer,
and then that decides where the traffic goes.
Then we have the same load balanced blog,
but this time we want to implement elastic cache in front of our database.
So we have our availability zone, our VPC,
our load balancer that goes through our EC2 instances.
So our EC2 instances will first access elastic cache,
instead of the database directly,
and then elastic cache will connect to the database,
and the user will receive fast, in memory data, straight from elastic cache.
And of course, in this case, our user hits the elastic load balancer directly,
again. Next we're going to have our cached and load balanced blog,
but also with a CDN.
But this time we will have CloudFront in front of everything,
and then the rest of our infrastructure is the same.
In this case,
our user talks straight to CloudFront instead of the load balancer.
So no matter where they are around the world,
they will get fast content delivered from a CloudFront edge node.
And finally, let's make this highly available with a content delivery network.
This means we're going to have 2 availability zones in our VPC,
then we're going to begin with CloudFront,
which will redirect traffic to our load balancer,
which will split traffic between multiple EC2 instances in the different
availability zones. These then get their data from elastic cache,
which come from their RDS databases. In region 2,
we have an RDS replica,
which is a readonly version of the database in the first availability zone,
and again, the user connects straight to CloudFront.
As you can see,
constructing websites can get quite complex and AWS have all of the
tools for the job available to you. Now,
one final thing before we finish up,
here is an advanced blog architecture diagram from AWS.
It's actually not too different to what I mentioned in the previous slide,
although it has a lot more detail about other services that could be
implemented, like an application load balancer, Amazon EFS for your storage,
and it separates your VPCs depending on what they're being used for such as
public access application and data access. Again,
this is a little bit too advanced for this course,
but I wanted to show you what it looked like anyway, before we finish up,
I'd just like to mention the AWS architecture blog,
which is a wonderful site to visit if you're interested in how AWS and their
partners architect solutions.
I've linked it in the resources section of this lecture for you,
and I'll give you some more advice regarding where else to go after you complete
this course in the next lecture. All right. Thank you for watching.
I hope this gave you some insight into how a cloud engineer would begin to
describe their own applications with AWS services. Thank you for watching.
If you have any questions, please let me know. Otherwise feel free to move on.